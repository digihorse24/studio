/**
 * @fileoverview Firestore Security Rules for HufManager application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model where each Profi (Hufbearbeiter)
 * has exclusive access to their own data, including customers, horses, partners,
 * appointments, and related records.  Customers (Pferdebesitzer) cannot access data from other
 * customers. Authorization Independence is maintained throughout the data model
 * by including relevant owner IDs within each document, avoiding the need for costly
 * and complex `get()` operations in the rules.
 *
 * Data Structure:
 * The data is organized hierarchically under the `/profis/{profiId}` collection.
 * Each Profi owns their own data tree, including:
 * - `/profis/{profiId}/customers/{customerId}`
 * - `/profis/{profiId}/customers/{customerId}/horses/{horseId}`
 * - `/profis/{profiId}/partners/{partnerId}`
 * - `/profis/{profiId}/appointments/{appointmentId}`
 * - `/profis/{profiId}/customers/{customerId}/horses/{horseId}/consents/{consentId}`
 * - `/profis/{profiId}/horses/{horseId}/hoofAnalyses/{hoofAnalysisId}`
 *
 * Key Security Decisions:
 * - Profis can only access data associated with their own `profiId`.
 * - Customers are associated with a Profi and can only be accessed through the Profi's scope.
 * - List operations are secured by scoping them to the Profi's data tree.
 * - Data consistency is enforced by validating that the `profiId` in the path matches
 *   the `profiId` in the document data during creation.  The `profiId` is immutable
 *   on update.
 * - Customer-controlled Consents govern data sharing with Partners.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a Profi to manage their own profile.
     * @path /profis/{profiId}
     * @allow (get, list) if isSignedIn() && isOwner(profiId)
     * @allow (create) if isSignedIn() && request.auth.uid == profiId
     * @allow (update, delete) if isSignedIn() && isExistingOwner(profiId)
     * @deny (create) if isSignedIn() && request.auth.uid != profiId
     * @deny (update, delete) if !isSignedIn() || request.auth.uid != profiId
     * @principle Enforces document ownership for writes and verified identity for all operations.
     */
    match /profis/{profiId} {
      allow get: if isSignedIn() && isOwner(profiId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == profiId;
      allow update: if isSignedIn() && isExistingOwner(profiId);
      allow delete: if isSignedIn() && isExistingOwner(profiId);
    }

    /**
     * @description Allows a Profi to manage their own customers.
     * @path /profis/{profiId}/customers/{customerId}
     * @allow (get, list) if isSignedIn() && isOwner(profiId)
     * @allow (create) if isSignedIn() && request.resource.data.profiId == profiId
     * @allow (update, delete) if isSignedIn() && isExistingOwner(profiId)
     * @deny (create) if !isSignedIn() || request.resource.data.profiId != profiId
     * @deny (update, delete) if !isSignedIn() || resource.data.profiId != profiId
     * @principle Enforces document ownership for writes and verified identity for all operations.
     */
    match /profis/{profiId}/customers/{customerId} {
      allow get: if isSignedIn() && isOwner(profiId);
      allow list: if isSignedIn() && isOwner(profiId);
      allow create: if isSignedIn() && request.resource.data.profiId == profiId;
      allow update: if isSignedIn() && isExistingOwner(profiId) && request.resource.data.profiId == resource.data.profiId;
      allow delete: if isSignedIn() && isExistingOwner(profiId);
    }

    /**
     * @description Allows a Profi to manage horses for their customers.
     * @path /profis/{profiId}/customers/{customerId}/horses/{horseId}
     * @allow (get, list) if isSignedIn() && isOwner(profiId)
     * @allow (create) if isSignedIn() && request.resource.data.profiId == profiId
     * @allow (update, delete) if isSignedIn() && isExistingOwner(profiId)
     * @deny (create) if !isSignedIn() || request.resource.data.profiId != profiId
     * @deny (update, delete) if !isSignedIn() || resource.data.profiId != profiId
     * @principle Enforces document ownership for writes and verified identity for all operations.
     */
    match /profis/{profiId}/customers/{customerId}/horses/{horseId} {
      allow get: if isSignedIn() && isOwner(profiId);
      allow list: if isSignedIn() && isOwner(profiId);
      allow create: if isSignedIn() && request.resource.data.profiId == profiId;
      allow update: if isSignedIn() && isExistingOwner(profiId) && request.resource.data.profiId == resource.data.profiId;
      allow delete: if isSignedIn() && isExistingOwner(profiId);
    }

    /**
     * @description Allows a Profi to manage their partners.
     * @path /profis/{profiId}/partners/{partnerId}
     * @allow (get, list) if isSignedIn() && isOwner(profiId)
     * @allow (create) if isSignedIn() && request.resource.data.profiId == profiId
     * @allow (update, delete) if isSignedIn() && isExistingOwner(profiId)
     * @deny (create) if !isSignedIn() || request.resource.data.profiId != profiId
     * @deny (update, delete) if !isSignedIn() || resource.data.profiId != profiId
     * @principle Enforces document ownership for writes and verified identity for all operations.
     */
    match /profis/{profiId}/partners/{partnerId} {
      allow get: if isSignedIn() && isOwner(profiId);
      allow list: if isSignedIn() && isOwner(profiId);
      allow create: if isSignedIn() && request.resource.data.profiId == profiId;
      allow update: if isSignedIn() && isExistingOwner(profiId) && request.resource.data.profiId == resource.data.profiId;
      allow delete: if isSignedIn() && isExistingOwner(profiId);
    }

    /**
     * @description Allows a Profi to manage their appointments.
     * @path /profis/{profiId}/appointments/{appointmentId}
     * @allow (get, list) if isSignedIn() && isOwner(profiId)
     * @allow (create) if isSignedIn() && request.resource.data.profiId == profiId
     * @allow (update, delete) if isSignedIn() && isExistingOwner(profiId)
     * @deny (create) if !isSignedIn() || request.resource.data.profiId != profiId
     * @deny (update, delete) if !isSignedIn() || resource.data.profiId != profiId
     * @principle Enforces document ownership for writes and verified identity for all operations.
     */
    match /profis/{profiId}/appointments/{appointmentId} {
      allow get: if isSignedIn() && isOwner(profiId);
      allow list: if isSignedIn() && isOwner(profiId);
      allow create: if isSignedIn() && request.resource.data.profiId == profiId;
      allow update: if isSignedIn() && isExistingOwner(profiId) && request.resource.data.profiId == resource.data.profiId;
      allow delete: if isSignedIn() && isExistingOwner(profiId);
    }

    /**
     * @description Allows a Profi to manage consents for their customers.
     * @path /profis/{profiId}/customers/{customerId}/horses/{horseId}/consents/{consentId}
     * @allow (get, list) if isSignedIn() && isOwner(profiId)
     * @allow (create) if isSignedIn() && request.resource.data.profiId == profiId
     * @allow (update, delete) if isSignedIn() && isExistingOwner(profiId)
     * @deny (create) if !isSignedIn() || request.resource.data.profiId != profiId
     * @deny (update, delete) if !isSignedIn() || resource.data.profiId != profiId
     * @principle Enforces document ownership for writes and verified identity for all operations.
     */
    match /profis/{profiId}/customers/{customerId}/horses/{horseId}/consents/{consentId} {
      allow get: if isSignedIn() && isOwner(profiId);
      allow list: if isSignedIn() && isOwner(profiId);
      allow create: if isSignedIn() && request.resource.data.profiId == profiId;
      allow update: if isSignedIn() && isExistingOwner(profiId) && request.resource.data.profiId == resource.data.profiId;
      allow delete: if isSignedIn() && isExistingOwner(profiId);
    }

    /**
     * @description Allows a Profi to manage hoof analyses for their horses.
     * @path /profis/{profiId}/horses/{horseId}/hoofAnalyses/{hoofAnalysisId}
     * @allow (get, list) if isSignedIn() && isOwner(profiId)
     * @allow (create) if isSignedIn() && request.resource.data.profiId == profiId
     * @allow (update, delete) if isSignedIn() && isExistingOwner(profiId)
     * @deny (create) if !isSignedIn() || request.resource.data.profiId != profiId
     * @deny (update, delete) if !isSignedIn() || resource.data.profiId != profiId
     * @principle Enforces document ownership for writes and verified identity for all operations.
     */
    match /profis/{profiId}/horses/{horseId}/hoofAnalyses/{hoofAnalysisId} {
      allow get: if isSignedIn() && isOwner(profiId);
      allow list: if isSignedIn() && isOwner(profiId);
      allow create: if isSignedIn() && request.resource.data.profiId == profiId;
      allow update: if isSignedIn() && isExistingOwner(profiId) && request.resource.data.profiId == resource.data.profiId;
      allow delete: if isSignedIn() && isExistingOwner(profiId);
    }

    /**
     * @description Secure generic paths with a "not implemented" message.
     * @path /{path=**}
     * @allow get, list, create, update, delete: if false;
     * @principle Prevents accidental access to unspecified paths.
     */
    match /{path=**} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is the owner of an existing document.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}